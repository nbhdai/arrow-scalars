// Version 0.3.0

syntax = "proto3";
package arrow_scalars;

message FieldProto {
  string name = 1;
  DataTypeProto data_type = 2;
  bool nullable = 3;
}

message SchemaProto {
    repeated FieldProto fields = 1;
}

message DataTypeProto {
    message EmptyMessage {}
    message Timestamp {
        optional string tz = 1;
    }
    enum IntervalUnit {
        year_month = 0;
        day_time = 1;
        month_day_nano = 2;
    }
    message FixedSizeList {
        int32 size = 1;
        FieldProto list_type = 2;
    }
    message Struct {
        repeated FieldProto fields = 1;
    }
    message Dictionary {
        DataTypeProto key_type = 1;
        DataTypeProto value_type = 2;
    }
    message Union {
        enum Mode {
            sparse = 0;
            dense = 1;
        }
        repeated FieldProto fields = 1;
        repeated int32 type_ids = 2;
        Mode mode = 3;
    }
    message Decimal {
        int32 precision = 1;
        int32 scale = 2;
    }
    message Map {
        FieldProto struct_field = 1;
        bool keys_sorted = 2;
    }
    oneof data_type {
        EmptyMessage null = 1;

        EmptyMessage bool = 2;
        EmptyMessage int8 = 3;
        EmptyMessage int16 = 4;
        EmptyMessage int32 = 5;
        EmptyMessage int64 = 6;
        EmptyMessage uint8 = 7;
        EmptyMessage uint16 = 8;
        EmptyMessage uint32 = 9;
        EmptyMessage uint64 = 10;
        EmptyMessage float16 = 11;
        EmptyMessage float32 = 12;
        EmptyMessage float64 = 13;

        EmptyMessage date32 = 14;
        EmptyMessage date64 = 15;
        EmptyMessage time32_second = 16;
        EmptyMessage time32_millisecond = 17;
        EmptyMessage time64_microsecond = 18;
        EmptyMessage time64_nanosecond = 19;
        Timestamp timestamp_second = 20;
        Timestamp timestamp_millisecond = 21;
        Timestamp timestamp_microsecond = 22;
        Timestamp timestamp_nanosecond = 23;
        EmptyMessage duration_second = 24;
        EmptyMessage duration_millisecond = 25;
        EmptyMessage duration_microsecond = 26;
        EmptyMessage duration_nanosecond = 27;
        EmptyMessage interval_year_month = 28;
        EmptyMessage interval_day_time = 29;
        EmptyMessage interval_month_day_nano = 30;

        EmptyMessage binary = 31;
        EmptyMessage large_binary = 32;
        int32 fixed_size_binary = 33;

        EmptyMessage utf8 = 34;
        EmptyMessage large_utf8 = 35;

        FieldProto list = 36;
        FieldProto large_list = 37;
        FixedSizeList fixed_size_list = 38;

        Struct struct = 39;
        Dictionary dictionary = 40;
        Union union = 41;

        Decimal decimal128 = 42;
        Decimal decimal256 = 43;
        Map map = 44;
    }
}

message TableScalar {
    message Struct {
        map<string,TableScalar> elements = 1;
    }
    message Union {
        int32 type_id = 1;
        TableScalar value = 2;
    }
    message Map {
        TableList keys = 1;
        TableList values = 2;
    }
    
    oneof value {
        bool null = 1;
        bool boolean = 2;
        int32 int8 = 3;
        int32 int16 = 4;
        int32 int32 = 5;
        int64 int64 = 6;
        uint32 uint8 = 7;
        uint32 uint16 = 8;
        uint32 uint32 = 9;
        uint64 uint64 = 10;
        float float16 = 11;
        float float32 = 12;
        double float64 = 13;
        int32 date32 = 15;
        int64 date64 = 16;
        int32 time32_second = 17;
        int32 time32_millisecond = 18;
        int64 time64_microsecond = 19;
        int64 time64_nanosecond = 20;
        int64 timestamp_second = 21;
        int64 timestamp_millisecond = 22;
        int64 timestamp_microsecond = 23;
        int64 timestamp_nanosecond = 24;
        int64 duration_second = 25;
        int64 duration_millisecond = 26;
        int64 duration_microsecond = 27;
        int64 duration_nanosecond = 28;
        int32 interval_year_month = 29;
        int64 interval_day_time = 30;
        bytes binary = 31;
        bytes fixed_size_binary = 32;
        bytes large_binary = 33;
        string utf8 = 34;
        string large_utf8 = 35;
        Struct struct = 36;
        TableScalar union = 37;
        // We don't care about the exact index in dictionaries, so we don't encode it.
        TableScalar dictionary = 38;
        TableList list = 39;
        TableList fixed_size_list = 40;
        TableList large_list = 41;
        Map map = 42;
    }
}

message TableList {
    message BooleanList {
        repeated bool values = 1;
        repeated bool set = 2;
    }
    message Int8List {
        repeated int32 values = 1;
        repeated bool set = 2;
    }
    message Int16List {
        repeated int32 values = 1;
        repeated bool set = 2;
    }
    message Int32List {
        repeated int32 values = 1;
        repeated bool set = 2;
    }
    message Int64List {
        repeated int64 values = 1;
        repeated bool set = 2;
    }
    message UInt8List {
        repeated uint32 values = 1;
        repeated bool set = 2;
    }
    message UInt16List {
        repeated uint32 values = 1;
        repeated bool set = 2;
    }
    message UInt32List {
        repeated uint32 values = 1;
        repeated bool set = 2;
    }
    message UInt64List {
        repeated uint64 values = 1;
        repeated bool set = 2;
    }
    message Float16List {
        repeated float values = 1;
        repeated bool set = 2;
    }
    message Float32List {
        repeated float values = 1;
        repeated bool set = 2;
    }
    message Float64List {
        repeated double values = 1;
        repeated bool set = 2;
    }
    message TimeList {
        repeated int64 times = 2;
        optional string tz = 3;
        repeated bool set = 4;
    }
    message DurationList {
        repeated int64 durations = 2;
        repeated bool set = 3;
    }
    message IntervalList {
        DataTypeProto.IntervalUnit unit = 1;
        repeated int64 intervals = 2;
        repeated bool set = 3;
    }
    message BinaryList {
        repeated bytes values = 1;
        repeated bool set = 2;
        optional int32 size = 3;
    }
    message Utf8List {
        repeated string values = 1;
        repeated bool set = 2;
    }
    message DictionaryList {
        TableList values = 1;
        DataTypeProto index_type = 2;
        repeated bool set = 3;
    }
    message StructList {
        map<string,TableList> values = 1;
        repeated bool set = 2;
    }
    message UnionList {
        repeated TableScalar values = 1;
        repeated bool set = 2;
    }
    message ListList {
        repeated TableList values = 1;
        repeated bool set = 2;
        FieldProto list_type = 3;
        optional int32 size = 4;
    }

    oneof values {
        BooleanList boolean = 1;
        Int8List int8 = 3;
        Int16List int16 = 4;
        Int32List int32 = 5;
        Int64List int64 = 6;
        UInt8List uint8 = 7;
        UInt16List uint16 = 8;
        UInt32List uint32 = 9;
        UInt64List uint64 = 10;
        Float16List float16 = 11;
        Float32List float32 = 12;
        Float64List float64 = 13;
        Int32List date32 = 14;
        Int64List date64 = 15;
        Int32List time32_second = 16;
        Int32List time32_millisecond = 17;
        Int64List time64_microsecond = 18;
        Int64List time64_nanosecond = 19;

        TimeList timestamp_second = 20;
        TimeList timestamp_millisecond = 21;
        TimeList timestamp_microsecond = 22;
        TimeList timestamp_nanosecond = 23;

        Int64List duration_second = 24;
        Int64List duration_millisecond = 25;
        Int64List duration_microsecond = 26;
        Int64List duration_nanosecond = 27;

        Int32List interval_year_month = 28;
        Int64List interval_day_time = 29;

        BinaryList binary = 30;
        BinaryList large_binary = 31;
        BinaryList fixed_size_binary = 32;
        Utf8List utf8 = 33;
        Utf8List large_utf8 = 34;
        ListList list = 35;
        ListList large_list = 36;
        ListList fixed_size_list = 37;
        UnionList union = 38;
        DictionaryList dictionary = 39;
        StructList struct = 40;
    }
}

message TableRow {
    map<string, TableScalar> values = 1;
}

message Table {
    map<string, TableList> values = 1;
}